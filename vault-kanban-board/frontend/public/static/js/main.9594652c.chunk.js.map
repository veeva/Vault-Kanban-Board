{"version":3,"sources":["components/loadingSpinner.jsx","components/notAuthenticatedAlert.jsx","components/kanban/styled.jsx","components/kanban/kanbanCard.jsx","components/kanban/kanbanSwimlane.jsx","utils/axios.js","components/kanban/kanbanBoard.jsx","app.jsx","handler.jsx","index.jsx"],"names":["LoadingSpinner","alignItems","justifyContent","height","size","as","ml","NotAuthenticatedAlert","cancelRef","onClose","isOpen","leastDestructiveRef","fontSize","fontWeight","ref","onClick","defaultProps","StyledCardInfo","styled","span","div","StyledCardLabel","h4","StyledCardLabelContainer","StyledCard","Flex","StyledList","ListContainer","StyledBoard","KanbanCard","kanbanCard","index","kanbanBoard","draggableId","id","provider","draggableProps","dragHandleProps","innerRef","style","position","backgroundColor","display","className","name__v","card_fields","filter","kanbanSwimline","visible__c","map","kanbanCardField","label__c","old_values","field_api_name__c","KanbanSwimlane","droppableId","control_value__c","provided","droppableProps","accent_color_name__c","cards","swimlaneName","placeholder","post","bodyParams","axios","process","getKanbanData","vaultDNS","sessionId","board","page","action","setKanbanData","data","KanbanView","useState","spinner","setSpinner","setKanbanBoard","boardLabel","setBoardLabel","allowSave","setAllowSave","pageNumber","setPageNumber","getData","newPageNumber","a","console","log","kanbanDataResponse","allow_save__c","getNextPage","page_count__c","getPrevPage","handleKeyPress","e","key","useEffect","document","addEventListener","updateFeatures","saveData","maxH","maxWidth","width","pr","pl","mr","paddingLeft","marginLeft","colorScheme","leftIcon","Check","mt","mb","onKeyPress","paddingTop","disabled","paddingBottom","paddingRight","ArrowLeft","onDragEnd","result","destination","source","tempBoard","JSON","parse","stringify","destinationSwimlaneName","destinationSwimlane","swimlanes","find","sourceSwimlaneName","sourceSwimlane","sourceCard","controlField","control_field__c","new_values","destinationCards","length","handleFeatureMove","ArrowRight","App","showAuthAlert","setAuthAlertState","React","useRef","flexDirection","marginTop","marginBottom","Handler","props","state","receiveMessage","bind","readyMessage","message_id","urlParams","URLSearchParams","window","location","search","this","setState","has","get","Number","parent","postMessage","event","message","session_id","removeEventListener","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9594652c.chunk.js","sourcesContent":["import React from 'react';\nimport { Heading, Flex, Spinner } from '@chakra-ui/react';\n\nconst LoadingSpinner = () => (\n  <Flex alignItems=\"center\" justifyContent=\"center\" height=\"100vh\">\n    <>\n      <Spinner size=\"xl\" />\n      <Heading as=\"h4\" size=\"sm\" ml=\"16px\">\n        Loading Data\n      </Heading>\n    </>\n  </Flex>\n);\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  AlertDialogFooter,\n  Button,\n} from '@chakra-ui/react';\n\nconst NotAuthenticatedAlert = ({ cancelRef, onClose, isOpen }) => (\n  <AlertDialog isOpen={isOpen} leastDestructiveRef={cancelRef} onClose={onClose}>\n    <AlertDialogOverlay>\n      <AlertDialogContent>\n        <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n          Not Authenticated\n        </AlertDialogHeader>\n\n        <AlertDialogBody>\n          Log into Veeva Vault to authenticate your session and reload.\n        </AlertDialogBody>\n\n        <AlertDialogFooter>\n          <Button ref={cancelRef} onClick={onClose}>\n            Close\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialogOverlay>\n  </AlertDialog>\n);\n\nNotAuthenticatedAlert.defaultProps = {\n  cancelRef: {},\n  onClose: () => {},\n  isOpen: true,\n};\n\nNotAuthenticatedAlert.propTypes = {\n  cancelRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n  ]),\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default NotAuthenticatedAlert;\n","import styled from '@emotion/styled';\nimport { Flex } from '@chakra-ui/react';\n\nexport const StyledLabel = styled.span`\n  border-radius: 4px;\n  color: #fff;\n  display: block;\n  overflow: hidden;\n  position: relative;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  float: left;\n  height: 8px;\n  margin: 0 4px 4px 0;\n  max-width: 40px;\n  min-width: 40px;\n  padding: 0;\n  text-shadow: none;\n  width: auto;\n`;\nexport const StyledCardInfo = styled.div`\n  user-select: none;\n  color: rgb(9, 30, 66);\n  cursor: grab;\n  margin: 0;\n  padding: 0;\n  flex-grow: 1;\n  flex-basis: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const StyledCardFeatureInfoLine = styled.div`\n  user-select: none;\n  color: rgb(9, 30, 66);\n  cursor: grab;\n  padding: 0;\n  display: flex;\n  margin-top: 8px;\n  align-items: center;\n  font-size: 12px;\n  flex-wrap: wrap;\n`;\n\nexport const StyledCardLabel = styled.h4`\n  color: #172b4d;\n  font-weight: 600;\n  padding: 8px;\n  transition: background-color 0.2s ease 0s;\n  flex-grow: 1;\n  user-select: none;\n  position: relative;\n  touch-action: manipulation;\n  cursor: grab;\n  margin-top: 0;\n`;\n\nexport const StyledCardLabelContainer = styled.div`\n  color: rgb(9, 30, 66);\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-top-left-radius: 2px;\n  border-top-right-radius: 2px;\n  background-color: rgb(235, 236, 240);\n  transition: background-color 0.2s ease 0s;\n`;\n\nexport const StyledCard = styled(Flex)`\n  text-decoration: none;\n  border-radius: 2px;\n  border: 2px solid transparent;\n  background-color: rgb(255, 255, 255);\n  box-shadow: none;\n  box-sizing: border-box;\n  padding: 8px;\n  min-height: 40px;\n  margin-bottom: 8px;\n  user-select: none;\n  color: rgb(9, 30, 66);\n  display: flex;\n  touch-action: manipulation;\n  cursor: grab;\n`;\n\nexport const StyledList = styled(Flex)`\n  color: rgb(9, 30, 66);\n  margin: 0;\n  background-color: rgb(235, 236, 240);\n  display: flex;\n  flex-direction: column;\n  opacity: inherit;\n  padding: 8px 8px 0px;\n  border: 8px;\n  transition: background-color 0.2s ease 0s, opacity 0.1s ease 0s;\n  user-select: none;\n  width: 320px;\n  min-height: 400px;\n  overflow-anchor: none;\n  border-radius: 4px;\n`;\n\nexport const ListContainer = styled(Flex)`\n  color: rgb(9, 30, 66);\n  padding: 0;\n  margin: 8px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const StyledBoard = styled(Flex)`\n  color: rgb(9, 30, 66);\n  margin: 0;\n  padding: 10;\n  min-height: 100vh;\n  min-width: 100vw;\n  display: inline-flex;\n  justify-content: left;\n  overflow-anchor: none;\n  border-width: 1px;\n  background-color: white;\n  padding-top: 20px;\n  padding-left: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Box } from '@chakra-ui/react';\nimport { StyledCard, StyledCardInfo } from './styled';\n\nconst KanbanCard = ({ kanbanCard, index, kanbanBoard }) => (\n  <Draggable draggableId={kanbanCard.id} index={index} key={kanbanCard.id}>\n    {(provider) => (\n      <StyledCard\n        key={kanbanCard.id}\n        index={index}\n        {...provider.draggableProps}\n        {...provider.dragHandleProps}\n        ref={provider.innerRef}\n        fontSize={['12px', '14px']}\n        style={{\n          ...provider.draggableProps.style,\n          position: 'static',\n          backgroundColor: 'White',\n        }}\n      >\n        <StyledCardInfo>\n          <Box display=\"inline-flex\" className=\"cardTitle\">\n            {kanbanCard.name__v}\n          </Box>\n          <Box>\n            <table>\n              {kanbanBoard &&\n                kanbanBoard.card_fields\n                  // eslint-disable-next-line react/prop-types\n                  .filter((kanbanSwimline) => kanbanSwimline.visible__c)\n                  .map((kanbanCardField) => (\n                    <tr>\n                      <td className=\"cardFieldLabel\">{kanbanCardField.label__c}</td>\n                      <td className=\"cardFieldValue\">\n                        {kanbanCard.old_values[kanbanCardField.field_api_name__c]}\n                      </td>\n                    </tr>\n                  ))}\n            </table>\n          </Box>\n        </StyledCardInfo>\n      </StyledCard>\n    )}\n  </Draggable>\n);\n\nKanbanCard.defaultProps = {\n  kanbanBoard: {},\n  kanbanCard: {},\n  index: 0,\n};\n\nKanbanCard.propTypes = {\n  kanbanBoard: PropTypes.shape({\n    label__c: PropTypes.string,\n    card_fields: PropTypes.shape({\n      field_api_name__c: PropTypes.string,\n      id: PropTypes.string,\n      label__c: PropTypes.string,\n      name__v: PropTypes.string,\n      visible__c: PropTypes.bool,\n    }),\n  }),\n  kanbanCard: PropTypes.shape({\n    id: PropTypes.string,\n    label__c: PropTypes.string,\n    name__v: PropTypes.string,\n    old_values: PropTypes.shape({}),\n  }),\n  index: PropTypes.number,\n};\n\nexport default KanbanCard;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport KanbanCard from './kanbanCard';\nimport { ListContainer, StyledCardLabelContainer, StyledCardLabel, StyledList } from './styled';\n\nconst KanbanSwimlane = ({ kanbanSwimline, kanbanBoard }) => (\n  <Droppable droppableId={kanbanSwimline.control_value__c} key={kanbanSwimline.control_value__c}>\n    {(provided) => (\n      <ListContainer>\n        <StyledList\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n          style={{\n            backgroundColor: 'gray',\n          }}\n        >\n          <StyledCardLabelContainer\n            className=\"swimlaneHeader\"\n            style={{\n              backgroundColor: kanbanSwimline.accent_color_name__c,\n            }}\n          >\n            <StyledCardLabel>{kanbanSwimline.label__c}</StyledCardLabel>\n          </StyledCardLabelContainer>\n          {kanbanSwimline.cards &&\n            kanbanSwimline.cards.map((kanbanCard, index) => (\n              <KanbanCard\n                kanbanCard={kanbanCard}\n                index={index}\n                key={kanbanCard.id}\n                swimlaneName={kanbanSwimline.control_value__c}\n                kanbanBoard={kanbanBoard}\n              />\n            ))}\n          {provided.placeholder}\n        </StyledList>\n      </ListContainer>\n    )}\n  </Droppable>\n);\n\nKanbanSwimlane.defaultProps = {\n  kanbanBoard: {},\n  kanbanSwimline: {},\n};\n\nKanbanSwimlane.propTypes = {\n  kanbanBoard: PropTypes.shape({\n    label__c: PropTypes.string,\n  }),\n  kanbanSwimline: PropTypes.shape({\n    accent_color_name__c: PropTypes.string,\n    control_value__c: PropTypes.string,\n    cards: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        name__v: PropTypes.string,\n      })\n    ),\n    label__c: PropTypes.string,\n    visible__c: PropTypes.bool,\n  }),\n};\n\nexport default KanbanSwimlane;\n","import axios from 'axios';\n\nconst { REACT_APP_LAMBDA_URL } = process.env;\n\nexport const post = (bodyParams) => axios.post(`${REACT_APP_LAMBDA_URL}`, bodyParams);\n\nexport const getStates = (sessionId, vaultDNS) =>\n  post({\n    vaultDNS,\n    sessionId,\n    action: 'GET_ACCESS_REQUEST_STATES',\n  });\n\nexport const getKanbanData = (vaultDNS, sessionId, board, page) =>\n  post({\n    vaultDNS,\n    sessionId,\n    board,\n    page,\n    action: 'GET_KANBAN_DATA',\n  });\n\nexport const setKanbanData = (vaultDNS, sessionId, board, page, data) =>\n  post({\n    vaultDNS,\n    sessionId,\n    board,\n    page,\n    data,\n    action: 'SET_KANBAN_DATA',\n  });\n","import { Box, Button, Center, Container, Flex, Heading, Spinner } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { ArrowLeftIcon, ArrowRightIcon, CheckIcon } from '@chakra-ui/icons';\nimport KanbanSwimlane from './kanbanSwimlane';\nimport { StyledBoard } from './styled';\nimport { getKanbanData, setKanbanData } from '../../utils/axios';\n\nconst KanbanView = ({ vaultDNS, sessionId, board, page }) => {\n  const [spinner, setSpinner] = useState(null);\n  const [kanbanBoard, setKanbanBoard] = useState(null);\n  const [boardLabel, setBoardLabel] = useState('');\n  const [allowSave, setAllowSave] = useState('');\n  const [pageNumber, setPageNumber] = useState('');\n\n  const getData = async (newPageNumber) => {\n    console.log(`newPageNumber = ${newPageNumber}`);\n    setSpinner('Loading data');\n    const kanbanDataResponse = await getKanbanData(vaultDNS, sessionId, board, newPageNumber);\n    console.log(kanbanDataResponse);\n    setKanbanBoard(kanbanDataResponse.data.data);\n    console.log(kanbanDataResponse.data.data);\n    setBoardLabel(kanbanDataResponse.data.data.label__c);\n    setAllowSave(kanbanDataResponse.data.data.allow_save__c);\n    setSpinner(null);\n    setPageNumber(newPageNumber);\n  };\n\n  const getNextPage = async () => {\n    console.log(pageNumber);\n    if (pageNumber < kanbanBoard.page_count__c) {\n      await getData(pageNumber + 1);\n    }\n  };\n\n  const getPrevPage = async () => {\n    console.log(pageNumber);\n    if (pageNumber > 1) {\n      await getData(pageNumber - 1);\n    }\n  };\n\n  const handleKeyPress = async (e) => {\n    if (e.key === 'ArrowLeft') {\n      // await getPrevPage();\n    } else if (e.key === 'ArrowRight') {\n      // await getNextPage();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress);\n    if (!kanbanBoard) {\n      getData(page);\n    }\n  }, []);\n\n  const handleFeatureMove = (destination, source, draggableId) => {\n    console.log(destination);\n    console.log(source);\n    console.log(draggableId);\n\n    const tempBoard = JSON.parse(JSON.stringify(kanbanBoard));\n\n    // find the destination swimlane\n    const destinationSwimlaneName = destination.droppableId;\n    const destinationSwimlane = tempBoard.swimlanes.find(\n      (kanbanSwimline) => kanbanSwimline.control_value__c === destinationSwimlaneName\n    );\n\n    // find the source swimlane\n    const sourceSwimlaneName = source.droppableId;\n    const sourceSwimlane = tempBoard.swimlanes.find(\n      (kanbanSwimline) => kanbanSwimline.control_value__c === sourceSwimlaneName\n    );\n\n    const sourceCard = sourceSwimlane.cards.find((kanbanCard) => kanbanCard.id === draggableId);\n    const controlField = kanbanBoard.control_field__c;\n\n    if (!sourceCard.new_values) {\n      sourceCard.new_values = { id: null, controlField: null };\n    }\n    sourceCard.new_values.id = draggableId;\n    sourceCard.new_values[controlField] = destinationSwimlaneName;\n\n    let destinationCards = null;\n    if (destinationSwimlane.cards) {\n      destinationCards = [\n        ...destinationSwimlane.cards.filter(\n          (kanbanCard) => kanbanCard.name__v < sourceCard.name__v\n        ),\n        sourceCard,\n        ...destinationSwimlane.cards.filter(\n          (kanbanCard) => kanbanCard.name__v > sourceCard.name__v\n        ),\n      ];\n      destinationSwimlane.cards = destinationCards;\n    } else destinationSwimlane.cards = [sourceCard];\n\n    if (sourceSwimlane.cards && sourceSwimlane.cards.length > 1) {\n      sourceSwimlane.cards = sourceSwimlane.cards\n        .filter((kanbanCard) => kanbanCard.id !== draggableId)\n        .map((kanbanCard) => kanbanCard);\n    } else sourceSwimlane.cards = [];\n\n    setKanbanBoard(tempBoard);\n  };\n\n  const onDragEnd = (result) => {\n    if (kanbanBoard.allow_save__c) {\n      const { destination, source, draggableId } = result;\n      if (!destination) {\n        return;\n      }\n      if (destination.droppableId === source.droppableId) {\n        return;\n      }\n      handleFeatureMove(destination, source, draggableId);\n    }\n  };\n\n  const updateFeatures = async () => {\n    async function saveData() {\n      setSpinner('Saving data');\n      if (kanbanBoard) {\n        const kanbanDataResponse = await setKanbanData(\n          vaultDNS,\n          sessionId,\n          board,\n          page,\n          kanbanBoard\n        );\n        console.log(kanbanDataResponse);\n        setKanbanBoard(kanbanDataResponse.data.data);\n        console.log(kanbanDataResponse.data.data);\n        setBoardLabel(kanbanDataResponse.data.data.label__c);\n        setAllowSave(kanbanDataResponse.data.data.allow_save__c);\n      }\n      setSpinner(null);\n    }\n    saveData();\n  };\n\n  return (\n    <Container\n      maxH=\"500px\"\n      maxWidth=\"calc(100% - 32px)\"\n      width=\"calc(100% - 32px)\"\n      pr=\"0\"\n      pl=\"0\"\n      mr=\"0\"\n      ml=\"0\"\n    >\n      <Flex className=\"boardToolbar\">\n        <Heading paddingLeft={15} className=\"boardLabel\" fontSize=\"32px\">\n          {boardLabel}\n        </Heading>\n        {allowSave && allowSave === true && (\n          <Box marginLeft=\"auto\">\n            <Button\n              colorScheme=\"green\"\n              size=\"sm\"\n              leftIcon={<CheckIcon />}\n              onClick={() => updateFeatures()}\n            >\n              Save\n            </Button>\n          </Box>\n        )}\n      </Flex>\n      {spinner ? (\n        <Center mt=\"16px\" mb=\"16px\">\n          <Spinner size=\"md\" />\n          <Heading as=\"h4\" size=\"sm\" ml=\"16px\">\n            {spinner}\n          </Heading>\n        </Center>\n      ) : (\n        // eslint-disable-next-line react/style-prop-object\n        <StyledBoard onKeyPress={handleKeyPress}>\n          <Flex paddingTop=\"8px\">\n            <Box>\n              <Button\n                disabled={pageNumber <= 1}\n                paddingBottom=\"200\"\n                paddingLeft=\"2\"\n                paddingRight=\"0\"\n                paddingTop=\"200\"\n                colorScheme={pageNumber > 1 ? 'blackAlpha' : 'white'}\n                size=\"lg\"\n                leftIcon={pageNumber > 1 ? <ArrowLeftIcon /> : ''}\n                onClick={() => getPrevPage()}\n              />\n            </Box>\n          </Flex>\n          <DragDropContext onDragEnd={onDragEnd}>\n            {kanbanBoard &&\n              // eslint-disable-next-line array-callback-return\n              kanbanBoard.swimlanes\n                .filter((kanbanSwimline) => kanbanSwimline.visible__c)\n                .map((kanbanSwimline) => (\n                  <KanbanSwimlane\n                    key={kanbanSwimline.control_value__c}\n                    kanbanSwimline={kanbanSwimline}\n                    kanbanBoard={kanbanBoard}\n                  />\n                ))}\n          </DragDropContext>\n          <Flex paddingTop=\"8px\">\n            {kanbanBoard && pageNumber < kanbanBoard.page_count__c && (\n              <Box>\n                <Button\n                  paddingBottom=\"200\"\n                  paddingLeft=\"2\"\n                  paddingRight=\"0\"\n                  paddingTop=\"200\"\n                  colorScheme=\"blackAlpha\"\n                  size=\"lg\"\n                  leftIcon={<ArrowRightIcon />}\n                  onClick={() => getNextPage()}\n                />\n              </Box>\n            )}\n          </Flex>\n        </StyledBoard>\n      )}\n    </Container>\n  );\n};\n\nKanbanView.defaultProps = {\n  vaultDNS: '',\n  sessionId: '',\n  board: '',\n  page: '',\n};\n\nKanbanView.propTypes = {\n  vaultDNS: PropTypes.string,\n  sessionId: PropTypes.string,\n  board: PropTypes.string,\n  page: PropTypes.number,\n};\n\nexport default KanbanView;\n","/* eslint-disable no-unused-vars */\nimport * as lodashGet from 'lodash.get';\nimport React, { useEffect, useState } from 'react';\nimport { Container } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\nimport LoadingSpinner from './components/loadingSpinner';\nimport NotAuthenticatedAlert from './components/notAuthenticatedAlert';\nimport KanbanView from './components/kanban/kanbanBoard';\n\nfunction App({ vaultDNS, sessionId, board, page }) {\n  const [showAuthAlert, setAuthAlertState] = useState(false);\n  const authAlertClose = () => setAuthAlertState(false);\n  const cancelRef = React.useRef();\n\n  return (\n    <>\n      {showAuthAlert && <LoadingSpinner />}\n      {showAuthAlert && (\n        <NotAuthenticatedAlert\n          cancelRef={cancelRef}\n          isOpen={showAuthAlert}\n          onClose={authAlertClose}\n        />\n      )}\n      <Container\n        alignItems=\"left\"\n        justifyContent=\"center\"\n        flexDirection=\"column\"\n        marginTop=\"10px\"\n        marginLeft=\"32px\"\n        marginBottom=\"20px\"\n        width=\"calc(100% - 64px)\"\n        maxWidth=\"calc(100% - 64px)\"\n        pr=\"0\"\n        pl=\"0\"\n        mr=\"0\"\n      />\n\n      {!showAuthAlert && (\n        <KanbanView vaultDNS={vaultDNS} sessionId={sessionId} board={board} page={page} />\n      )}\n    </>\n  );\n}\n\nApp.defaultProps = {\n  vaultDNS: '',\n  sessionId: '',\n  board: '',\n  page: '',\n};\n\nApp.propTypes = {\n  vaultDNS: PropTypes.string,\n  sessionId: PropTypes.string,\n  board: PropTypes.string,\n  page: PropTypes.number,\n};\n\nexport default App;\n","import * as React from 'react';\n\nimport './index.css';\nimport App from './app';\nimport LoadingSpinner from './components/loadingSpinner';\n\nclass Handler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vaultDNS: null,\n      sessionId: null,\n      board: null,\n      page: null,\n    };\n    this.receiveMessage = this.receiveMessage.bind(this);\n  }\n\n  componentDidMount() {\n    const readyMessage = JSON.stringify({\n      message_id: 'ready',\n      data: {},\n    });\n    const urlParams = new URLSearchParams(window.location.search);\n    this.setState({\n      vaultDNS: urlParams.has('vaultDNS') ? urlParams.get('vaultDNS') : null,\n      sessionId: urlParams.has('sessionId') ? urlParams.get('sessionId') : null,\n      board: urlParams.has('board') ? urlParams.get('board') : null,\n      page: urlParams.has('page') ? Number(urlParams.get('page')) : 1,\n    });\n    // eslint-disable-next-line react/destructuring-assignment\n    if (!this.state.sessionId) {\n      window.parent.postMessage(readyMessage, '*');\n      window.addEventListener('message', this.receiveMessage);\n    }\n  }\n\n  receiveMessage(event) {\n    const message = JSON.parse(event.data);\n    if (message.message_id === 'session_id') {\n      this.setState({\n        sessionId: message.data.session_id,\n      });\n      window.removeEventListener('message', this.receiveMessage);\n    }\n  }\n\n  render() {\n    // eslint-disable-next-line react/destructuring-assignment\n    if (this.state.sessionId)\n      return (\n        <App\n          sessionId={\n            /* eslint-disable-next-line react/destructuring-assignment */\n            this.state.sessionId\n          }\n          vaultDNS={\n            /* eslint-disable-next-line react/destructuring-assignment */\n            this.state.vaultDNS\n          }\n          board={\n            /* eslint-disable-next-line react/destructuring-assignment */\n            this.state.board\n          }\n          page={\n            /* eslint-disable-next-line react/destructuring-assignment */\n            this.state.page\n          }\n        />\n      );\n    return <LoadingSpinner />;\n  }\n}\n\nexport default Handler;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nimport './index.css';\nimport Handler from './handler';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <Handler />\n    </ChakraProvider>\n  </React.StrictMode>,\n  // eslint-disable-next-line no-undef\n  document.getElementById('root')\n);\n"],"sourceRoot":""}